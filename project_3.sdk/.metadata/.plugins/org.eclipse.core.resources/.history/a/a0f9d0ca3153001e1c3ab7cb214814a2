
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "stdio.h"
#include <xuartlite.h>
#include <xparameters.h>

#include "platform.h"
#include "xil_io.h"

#define uart_id XPAR_UARTLITE_0_DEVICE_ID
#define MAX_STRING_SIZE 32
#define MAX_LENGHT 128


char c = '\0';
char msg_n[] = "Hello, enter huenter";
char msg_matrix[] = "Start to enter matrix";


void display_step(int step){
	switch (step){
		case 0:
			Xil_Out8(0x40000000, 19); // N
			break;
		case 1:
			Xil_Out8(0x40000000, 17); // A
			break;
		case 2:
			Xil_Out8(0x40000000, 0); // B
			break;
	}
}

void calc_result(int*** src_matrix, int** res_matrix, int matrix_size){
  int c_temp = 0;

  for(int i = 0; i < matrix_size ; i++){
	  for(int j = 0; j < matrix_size ; j++){
		  for(int r = 0; r < matrix_size ; r++){
		      c_temp += src_matrix[0][i][r] * src_matrix[1][r][j];
		  }
		  res_matrix[i][j] = c_temp;
	  }
  }
}

int get_number(char* line, size_t len){
  int num = 0;
  int mul = 1;
  for (int i = len - 1; i >= 0; i--){
	  num += (line[i] - '0') * mul;
    mul *= 10;
  }
  return num;
}

void print_matrix(int** src, int size){
	for (size_t i = 0; i < size; i++){
		for (size_t j = 0; j < size; j++){
			printf("%d ", src[i][j]);
		}
		printf("\n");
	}
}



int main()
{
	init_platform();
	XUartLite uart;
	XUartLite_Initialize(&uart, uart_id);

	//Xil_Out8(0x40000000, 1); // выбираем правый семисегментник (анод = 1)
	//display_step(0);

	int n;
	int matrixes [2][n][n];
	int result [n][n];
	char line[MAX_LENGHT] = {0};
	size_t pointer = 0;


	for(;;){
	  memset(matrixes,-1,sizeof(int)*n*n*2);
	  n = 0;
	  printf("%s", msg_n);
	  scanf("%d", &n);
	  printf("%d", n);

	  for (size_t step = 0; step < 2; step++){
		  for (size_t i = 0; i < n; i++){
			  for (size_t j = 0; j < n; j++){
				  while (c != ' '){
					  scanf("%c", &c);
					  printf("%c", c);
					  line[pointer++] = c;
				  }
				  matrixes[step][i][j] = get_number(line, pointer);
				  pointer = 0;
				  memset(line,0,MAX_LENGHT);
			  }
			}
	  }

	  calc_result(matrixes, result, n);
	  print_matrix(result, n);

  }


    cleanup_platform();
    return 0;
}
